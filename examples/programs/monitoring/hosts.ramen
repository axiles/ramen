-- vim: ft=sql expandtab
-- Example program to monitor some hosts via collectd

DEFINE collectd AS
  LISTEN FOR COLLECTD;

DEFINE memory AS
  SELECT
    truncate(start, 30s) AS start,
    out.start + 30s AS stop,
    host,
    COALESCE (type_instance, "unknown") AS _type,
    AVG (IF _type = "free" THEN value ELSE 0) AS free,
    AVG (IF _type = "used" THEN value ELSE 0) AS used,
    AVG (IF _type = "cached" THEN value ELSE 0) AS cached,
    AVG (IF _type = "buffered" THEN value ELSE 0) AS buffered,
    AVG (IF _type LIKE "slab%" THEN value ELSE 0) AS slab
  FROM collectd
  WHERE COALESCE (plugin = "memory", false)
  GROUP BY host, start // 30
  COMMIT AFTER in.start > out.start + 30s
  FACTORS host;

DEFINE cpu AS
  SELECT
    truncate(start, 30s) AS start,
    out.start + 30s AS stop,
    host,
    -- regexp extract the integer from the quotes, then cast to int:
    u16(instance) AS cpu_num,
    COALESCE (type_instance, "unknown") AS _type,
    AVG (IF _type = "user" THEN value ELSE 0) AS user,
    AVG (IF _type = "system" THEN value ELSE 0) AS system,
    AVG (IF _type = "nice" THEN value ELSE 0) AS nice,
    AVG (IF _type = "idle" THEN value ELSE 0) AS idle
  FROM collectd
  WHERE COALESCE (plugin = "cpu", false) AND COALESCE (type_name = "cpu", false)
  GROUP BY host, start // 30, instance
  COMMIT AFTER in.start > out.start + 30
  FACTORS host AND cpu_num;

DEFINE cpu_diff AS
  SELECT
    start, stop, host, cpu_num,
    (user - lag locally user) / 30 AS user,
    (system - lag locally system) / 30 AS system,
    (nice - lag locally nice) / 30 AS nice,
    (idle - lag locally idle) / 30 AS idle
  FROM cpu
  GROUP BY host, cpu_num
  KEEP ALL
  FACTORS host AND cpu_num;

DEFINE memory_alert AS
  FROM memory
  SELECT
    start, host,
    free + used + cached + buffered + slab AS total,
    free * 100 / total AS used_ratio,
    used_ratio > 50 AS firing
  GROUP BY host
  COMMIT, KEEP ALL AND
    NOTIFY "RAM is low" WITH
      "${host}" AS hosts AND "${used_ratio}% full" AS ratio
    AFTER COALESCE (out.firing <> previous.firing, false);
