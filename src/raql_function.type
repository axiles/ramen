// Also called "operation" here and there, describes what a worker should do.
// The AST of RaQL language:
[ // Aggregation of several tuples into one based on some key. Superficially
  // looks like a select but much more involved. Most clauses being optional,
  // this is really the Swiss-army knife for all data manipulation in Ramen:
	Aggregate {
	  // Composition of the output record
	  fields: {
			expr: $raql_expr;
			alias: $field_name;
			doc: string;
			aggr: string?
		}[];
		// also "*" minus listed fields:
    and_all_others: $field_name[]?;
    // Optional buffering of N tuples for sorting according to some
    // expression:
    sort: { size: u32; until: $raql_expr?; by: $raql_expr[]}?;
    // Simple way to filter out incoming tuples:
    where: $raql_expr;
    // How to compute the time range for that event:
    event_time: $event_time?;
    // Will send these notification to the alerter:
    notifications: $raql_expr[];
		// Grouping key:
    key: $raql_expr[];
		// Output the group after/before this condition holds
    commit_cond: $raql_expr;
    // Commit first and aggregate later
    commit_before: bool;
    // What happen when the group value is submitted:
    flush_how: [ reset | never ];
    // List of funcs (or sub-queries) that are our parents:
    from:
			[ NamedOperation {
					site: $site_name;
					rel_program: string?;
					function: $function_name
				}
			| Subquery ][];
    // Pause in between two productions (useful for operations with no
    // parents:
    every: $raql_expr?;
    // Fields with expected small dimensionality, suitable for breaking down
    // the time series:
    factors: $field_name[];
	}
| ReadExternal {
    source:
			[ File {
					name: $raql_expr;
					// Command to preprocess the file before reading:
					preprocessor: $raql_expr?;
					// Whether to unlink the file after opening it:
					unlink: $raql_expr;
				}
			| Kafka {
					options: (string; $raql_expr)[];
					topic: $raql_expr;
					// An optional vector or list ; None means all:
					partitions: $raql_expr?;
					restart_from:
						[ Beginning
						| OffsetFromEnd $raql_expr
						| SaveInState
						| UseKafkaGroupCoordinator {
								after_max_secs: $raql_expr;
								after_max_events: $raql_expr
							} ];
				} ];
    format:
			[ CSV {
					separator: char;
					null: string;
					may_quote: bool;	// default false
					escape_seq: string;	// default ""
					fields: $field_type[];
					vectors_of_chars_as_string: bool; 	// default false
					clickhouse_syntax: bool;	// default false
			  }
			| RowBinary $field_type[] ];
    event_time: $event_time?;
    factors: $field_name[];
	}
| ListenFor {
    net_addr: ip;
    port: u16;
    proto: [ collectd | netflow_v5 | graphite ];
    factors: $field_name[];
	} ]
