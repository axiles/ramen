#!/bin/sh
# Test network transfer of tuples

this_script="$0"
top_src=$(dirname "$this_script")/../../

# In addition to the aggregator site, how many logging sites do we want?
# Must be at least 1.
nb_loggers=2

# How long should we fill up with data before the functions are stopped.
# In seconds.
logs_for=6000

# hit_rate = logs per seconds output by each logger
hit_rate=1

. $top_src/tests/lib.sh

# Merely runs the logs generator in one instance and aggregate the entries
# in another. The aggregator is the "master" that will be forwarded logs to.
# Both run on a single machine but with different $RAMEN_DIR
#
# We rely on envvars to know which role this instance of the test script
# has to play and on which port to contact the master.
# By default I am the master:

if test -z "$master_port"; then
  r=$(rand 64511)
  master_port=$((1024+$r))
  be_master=yes
  ramen_site=aggregator
  master_ramen_dir="$RAMEN_DIR"
  log "I'm the aggregator, listening to forwarded tuples at port $master_port"
else
  # mktemp created a directory that we are not going to use:
  rmdir "$RAMEN_DIR"
  be_master=no
  test -n "$ramen_site" || fail 'master should have set ramen_site'
  test -n "$master_ramen_dir" || fail 'master should have set master_ramen_dir'
  log "I'm $ramen_site"
fi
export RAMEN_DIR="$master_ramen_dir/$ramen_site"

rc_version=v16
services_version=v2
archivist_version=v6

# Compile the test programs (only once)
if test "$be_master" = yes; then
  log "Compiling programs..."

  root="examples/programs/monitoring"
  if needs_recompile "$root/logs.x"; then
    "$ramen" compile "$root/logs.ramen"
  fi
  if needs_recompile "$root/logs_aggr.x"; then
    "$ramen" compile -L "$root" "$root/logs_aggr.ramen"
  fi

  log "Run the tunneling server..."
  "$ramen" tunneld --master=aggregator --port "$master_port" &
  tunneld_pid=$!
  at_exit "echo 'Killing tunneld'; kill '$tunneld_pid'"

  log "declare all the services..."
  # TODO: version number from ramen_versions.sh?
  services="$RAMEN_DIR/services/$services_version/services"
  mkdir -p $(dirname $services)
  echo '{' > $services
  echo '  "aggregator" => {' >> $services
  echo '    "tunneld" => { host="127.0.0.1"; port='"$master_port"' };' >> $services
  echo '  };' >> $services
  # Also declare other hosts that are not running any service so that
  # Services.all_hosts knows about them (improves logs on aggregator)
  for h in $(seq 1 $nb_loggers); do
    name="logger$h"
    echo '  "'"$name"'" => {};' >> $services
  done
  echo '}' >> $services

  log "Starting programs..."
  export RAMEN_REPORT_PERIOD=2
  "$ramen" run "$root/logs.x"      --src "$root/logs.ramen"      --master=aggregator --on-site="logger*"    --as logs   -p hit_rate=$hit_rate
  "$ramen" run "$root/logs_aggr.x" --src "$root/logs_aggr.ramen" --master=aggregator --on-site="aggregator" --as 1min   -p time_period=60
  "$ramen" run "$root/logs_aggr.x" --src "$root/logs_aggr.ramen" --master=aggregator --on-site="aggregator" --as 10mins -p time_period=600
  "$ramen" run "$root/logs_aggr.x" --src "$root/logs_aggr.ramen" --master=aggregator --on-site="aggregator" --as 1hour  -p time_period=3600

else
  log "Linking config files from aggregator" ;

  mkdir -p "$RAMEN_DIR/configuration/$rc_version/"
  ln "$RAMEN_DIR/../aggregator/configuration/$rc_version/rc" \
     "$RAMEN_DIR/configuration/$rc_version/"
  mkdir -p "$RAMEN_DIR/services/$services_version/"
  ln "$RAMEN_DIR/../aggregator/services/$services_version/services" \
     "$RAMEN_DIR/services/$services_version/"
  mkdir -p "$RAMEN_DIR/archivist/"
  ln -s "$RAMEN_DIR/../aggregator/archivist/$archivist_version" \
        "$RAMEN_DIR/archivist/"
  ln -s "$RAMEN_DIR/../aggregator/replays" "$RAMEN_DIR/"
fi

"$ramen" supervisor --master=aggregator --confserver=localhost --site="$ramen_site" &
supervisor_pid=$!
at_exit "echo 'Killing supervisor'; kill '$supervisor_pid'"

# Archivist --reconf and --stats must also run everywhere, and fully on master
if test "$be_master" = yes; then
  mkdir -p "$RAMEN_DIR/archivist/$archivist_version/"
  # The idea behind this conf is that aggregated values are kept for a
  # longer time while 1min aggregate is not kept, but could be reconstructed
  # from raw logs (thus allowing to test distributed replay)
  cat > "$RAMEN_DIR/archivist/$archivist_version/config" <<EOF
{
  size_limit = 8000000000;
  retentions = {
    "logs/http" => { duration = 43200 };
    "10mins/http" => { duration = 259200 };
    "1hour/http" => { duration = 2592000 };
    "*/stats" => { duration = 0 };
  }
}
EOF
  "$ramen" archivist --master=aggregator --site="$ramen_site" --loop=5 --reconf --stats --allocs &
  archivist_pid=$!
else
  "$ramen" archivist --master=aggregator --site="$ramen_site" --loop=5 --reconf --stats &
  archivist_pid=$!
fi
at_exit "echo 'Killing archivist'; kill '$archivist_pid'"

# httpd and confserver run only on the master site:
if test "$be_master" = yes; then
  log "Run the http and config servers..."

  "$ramen" httpd --master=aggregator --site="$ramen_site" --url=http://localhost:29380 --graphite=graphite/ &
  httpd_pid=$!
  at_exit "echo 'Killing httpd'; kill '$httpd_pid'"

  "$ramen" confserver --master=aggregator --site="$ramen_site" --debug &
  confserver_pid=$!
  at_exit "echo 'Killing confserver'; kill '$confserver_pid'"
fi

if test "$be_master" = yes; then

  # Run the other instances
  for h in $(seq 1 $nb_loggers); do
    name="logger$h"
    /usr/bin/env \
      master_port="$master_port" ramen_site="$name" \
      master_ramen_dir="$master_ramen_dir" \
      "$this_script" &
    logger_pid=$!
    at_exit "echo 'Killing $name'; kill '$logger_pid'"
  done
fi

if test "$be_master" = yes; then
  # Let's log full speed for some time...
  echo "Logging for $logs_for seconds..."
  sleep "$logs_for"

  echo "Stopping the functions."
  "$ramen" kill --master=aggregator '*'

  # Wait until we have "enough" data
  echo "Waiting for the kills..."
fi

wait

echo "Stopping..."
kill "$supervisor_pid"
